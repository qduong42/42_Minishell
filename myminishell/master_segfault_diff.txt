diff --git a/myminishell/Questions_Problems_special.txt b/myminishell/dontopen_deadinside.txt
similarity index 53%
rename from myminishell/Questions_Problems_special.txt
rename to myminishell/dontopen_deadinside.txt
index 521b85c..932e228 100644
--- a/myminishell/Questions_Problems_special.txt
+++ b/myminishell/dontopen_deadinside.txt
@@ -15,10 +15,6 @@ QUESTIONS:
 
 1) Typecast t_list struct? For e.g (int)&(current->content) for strchr(current->content[i], '=');
 --Why doesnt it work?
-2) Why t_list * doesnt need to be allocated but t_pipe struct needs to be? Possibly because t_list pointer points to node which is allocated.
-But t_pipe * points nowhere. The size of the struct is not malloced anywhere.
-3) Why does char *token persist even though malloc is only size of struct which is pointer, not for actual content? If token not used, 
-why free kills it? because token is malloced by ft_substr :D
 
 PROBLEMS:
 
diff --git a/myminishell/lexer.c b/myminishell/lexer.c
index 74606e1..25a8bb9 100644
--- a/myminishell/lexer.c
+++ b/myminishell/lexer.c
@@ -15,7 +15,10 @@
 // 		return (0);
 // }
 
-// void	pipe_handle(t_shell *s, int *start, int *i)
+// void	int_redirect(t_shell *s)
+// {
+// 	s->sub_pipes
+// }
 
 void	pipe_split(t_shell *s)
 {
@@ -28,9 +31,7 @@ void	pipe_split(t_shell *s)
 	quote = 0;
 	char *token;
 	char *temp;
-	s->sub_pipes = malloc(sizeof(t_pipe));
-	// printf("envPOINTER%p\n", s->sub_pipes);
-	s->sub_pipes->sub = NULL;
+	s->sub->s_p = NULL;
 	while (1)
 	{
 		if ((s->input[i] == PIPE && !quote) || s->input[i] == '\0')
@@ -39,7 +40,7 @@ void	pipe_split(t_shell *s)
 			temp = ft_strtrim(token, " ");
 			free(token);
 			token = temp;
-			ft_lstadd_back(&(s->sub_pipes->sub), ft_lstnew(token));
+			ft_lstadd_back(&(s->sub->s_p), ft_lstnew(token));
 			start = i + 1;
 			if (s->input[i] == '\0')
 				break ;
@@ -50,6 +51,7 @@ void	pipe_split(t_shell *s)
 			quote = 0;
 		i++;
 	}
+	print_list(s->sub->s_p);
 }
 
 //add_history functionality is built in, so further work required.
\ No newline at end of file
diff --git a/myminishell/main.c b/myminishell/main.c
index e7862e5..c19613f 100644
--- a/myminishell/main.c
+++ b/myminishell/main.c
@@ -10,13 +10,15 @@ int	main(int argc, char **argv, char **envp)
 	{
 		t_shell s;
 		s.env = create_env_list(envp);
-		//print_list(s.env);
+		// print_list(s.env);
 		s.input = readline(PROMPT);
 		add_history(s.input);
 		env_solver(&s);
-		pipe_split(&s);
-		print_list(s.sub_pipes->sub);
-		// int_red()
+		// printf("ENV expanded:%s\n", s.input);
+		/* pipe_split(&s);
+		printf("SUBPIPES:\n");
+		print_list(s.sub->s_p); */
+		// int_redirect(&s);
 		// interpret(&s);
 		if (!ft_strncmp(s.input, "exit", ft_strlen(s.input)))
 			exit (0);
diff --git a/myminishell/minishell.c b/myminishell/minishell.c
index a2d91f7..d673994 100644
--- a/myminishell/minishell.c
+++ b/myminishell/minishell.c
@@ -90,10 +90,11 @@ char	*find_env(t_shell *s, int i)
 		current = current->next;
 	}
 	char *env;
+	printf("current%p\n", current->next);
 	env = current->content;
 	if (current->next == NULL)
 		env = "" ;
-	// printf("env:%s\n", env);
+	printf("env:%s\n", env);
 	int x;
 	x = 0;
 	while (env[x])
@@ -106,11 +107,10 @@ char	*find_env(t_shell *s, int i)
 		x++;
 	}
 	// printf("LEN\t%dva_END_IN:%d\n", len, va_end_in - 1);
-	// printf("env found:%s\n", current->content);
+	printf("env found:%s\n", env);
 	char *tmp;
 	tmp = special_join(s->input, &env[x], len, i);
 	free(s->input);
-	// printf("Expanded:%s\n", tmp);
 	//expand(s)
 	//LENGTH OF NEW STRING = i - 1 + LENGTH OF EXPANDED VARIABLE + count from va_end_in to END
 	return (tmp);
diff --git a/myminishell/minishell.h b/myminishell/minishell.h
index cbdb359..e2345c6 100644
--- a/myminishell/minishell.h
+++ b/myminishell/minishell.h
@@ -32,24 +32,27 @@
 # define OUT '>'
 # define DOL '$'
 
-// t_list	
-
-typedef struct s_pipe
-{
-	t_list			*sub;
-	t_list			*file_in;
-	t_list			*file_out;
-	char			*hd_lim;
-	char			*append;
-}					t_pipe;
-
 typedef struct s_shell
 {
 	t_list			*env;
-	struct s_pipe	*sub_pipes;
+	struct s_pipe	*sub;
+	t_list			*int_red;
 	char			*input;
 }	t_shell;
 
+// ID: 0 ->
+
+typedef struct s_pipe
+{
+	t_list	*filename_in;
+	t_list	*filename_out;
+	t_list	*s_p;
+	int		id;
+	int		append;
+	int		heredoc;
+	char	*LIM;
+}	t_pipe;
+
 t_list *create_env_list(char **envp);
 
 void	env_solver(t_shell* s);
diff --git a/myminishell/uni_be_input.txt b/myminishell/unique_behavior.txt
similarity index 90%
rename from myminishell/uni_be_input.txt
rename to myminishell/unique_behavior.txt
index 0db9a4b..ea683f7 100644
--- a/myminishell/uni_be_input.txt
+++ b/myminishell/unique_behavior.txt
@@ -19,7 +19,6 @@ $
 
 INPUTS:
 ls -l -a | grep "$USER" | wc -l
-"$LANG""$USER"$USER | cat -e | wc -c
 
 BASH BEHAVIOR:
 bash-3.2$ $'USER'
